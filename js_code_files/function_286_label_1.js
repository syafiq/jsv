function(c,l){this.model.beginUpdate();try{var m=[];this.traverse(l,!0,mxUtils.bind(this,function(y,B){var z=null!=B&&this.isTreeEdge(B);z&&m.push(B);y==l||null!=B&&!z||m.push(y);return(null==B||z)&&(y==l||!this.model.isCollapsed(y))}));this.model.setCollapsed(l,c);for(var t=0;t<m.length;t++)this.model.setVisible(m[t],!c)}finally{this.model.endUpdate()}};Graph.prototype.isTreeEdge=function(c){return!this.isEdgeIgnored(c)};Graph.prototype.getTreeEdges=function(c,l,m,t,y,B){return this.model.filterCells(this.getEdges(c,
l,m,t,y,B),mxUtils.bind(this,function(z){return this.isTreeEdge(z)}))};Graph.prototype.getIncomingTreeEdges=function(c,l){return this.getTreeEdges(c,l,!0,!1,!1)};Graph.prototype.getOutgoingTreeEdges=function(c,l){return this.getTreeEdges(c,l,!1,!0,!1)};var d=EditorUi.prototype.init;EditorUi.prototype.init=function(){d.apply(this,arguments);this.editor.isChromelessView()&&!this.editor.editable||this.addTrees()};EditorUi.prototype.addTrees=function(){function c(I){return n.isVertex(I)&&m(I)}function l(I){var M=